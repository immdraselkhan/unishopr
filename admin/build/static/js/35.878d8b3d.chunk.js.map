{"version":3,"sources":["container/webSetup/locations/list.js","container/webSetup/locations/form.js","redux/webSetup/locations/actionCreator.js","container/webSetup/locations/index.js"],"names":["LocationList","showModal","isLoading","locations","getLocations","getLocationInfo","deleteLocation","getCities","columns","title","dataIndex","key","render","country","name","city","className","Scope","checkScopes","size","type","icon","onClick","_id","countryId","Alert","confirm","action","headerButtons","ghost","subTitle","total","onBack","window","history","back","extra","rowKey","bordered","loading","dataSource","data","pagination","current","page","onChange","pageNo","perPageNo","LocationForm","form","state","location","addLocation","updateLocation","countries","handleOk","dispatch","useDispatch","cities","useSelector","utilities","handleSubmit","Object","assign","footerButtons","htmlType","disabled","md","modalType","visible","onCancel","footer","labelCol","span","wrapperCol","id","validateMessages","required","onFinish","Item","rules","initialValue","label","placeholder","event","setFieldsValue","Option","value","length","map","latitude","longitude","code","status","fetchLocationAction","actions","fetchLocationsAction","resetLocationFormAction","fetchLocations","queries","req","getRequest","url","Constants","WEB_SETUP","auth","cb","postRequest","body","perPage","putRequest","fetchLocation","deleteRequest","LocationData","wsLocations","useForm","useState","colorModal","uploading","setState","useEffect","fetchData","then","r","fetchCountries","showModalEdit","fetchCities","resetFields"],"mappings":"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","file":"static/js/35.878d8b3d.chunk.js","sourcesContent":["import React from \"react\";\nimport {Scope} from \"../../../services/scopeService\";\nimport FontAwesome from \"react-fontawesome\";\nimport {Alert} from \"../../../services/alertService\";\nimport {Button} from \"../../../components/buttons/buttons\";\nimport FeatherIcon from \"feather-icons-react\";\nimport {Button as AntButton, PageHeader, Table} from \"antd\";\n\nconst LocationList = ({showModal, isLoading, locations, getLocations, getLocationInfo, deleteLocation, getCities}) => {\n    const columns = [\n        {\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n        },\n        {\n            title: 'Country',\n            dataIndex: 'country',\n            key: 'country',\n            render: (country) => <>{country?.name}</>\n        },\n        {\n            title: 'City',\n            dataIndex: 'city',\n            key: 'city',\n            render: (city) => <>{city?.name}</>\n        },\n        {\n            title: 'Latitude',\n            dataIndex: 'latitude',\n            key: 'latitude',\n            render: (key) => key ? key : 'N/A'\n        },\n        {\n            title: 'Longitude',\n            dataIndex: 'longitude',\n            key: 'longitude',\n            render: (key) => key ? key : 'N/A'\n        },\n        {\n            title: 'Code',\n            dataIndex: 'code',\n            key: 'code',\n            render: (key) => key ? key : 'N/A'\n        },\n        {\n            title: 'Status',\n            dataIndex: 'status',\n            key: 'status',\n        },\n        {\n            title: <div className=\"text-right\">Action</div>,\n            render: (key) => <div className=\"text-right\">\n                {Scope.checkScopes(['ws_locations_update']) && (\n                    <AntButton\n                        size=\"small\"\n                        type=\"ghost\"\n                        className=\"minimum-mr color-info border-info\"\n                        icon={<FontAwesome name={\"edit\"} />}\n                        onClick={() => {getLocationInfo(key?._id);  getCities({countryId: key?.country?._id})}}\n                    />\n                )}\n                {Scope.checkScopes(['ws_locations_delete']) && (\n                    <AntButton\n                        size=\"small\"\n                        type=\"ghost\"\n                        className=\"color-danger border-danger\"\n                        icon={<FontAwesome name={\"trash\"} />}\n                        onClick={() => Alert.confirm({action: deleteLocation(key)})}\n                    />\n                )}\n            </div>\n        },\n    ];\n\n    const headerButtons = [\n        <div key=\"1\" className=\"page-header-action\">\n            {Scope.checkScopes(['ws_locations_create']) && (\n                <Button size=\"medium\" type=\"primary\" onClick={() => showModal('primary')}>\n                    <FeatherIcon icon=\"plus\" size={14}/>\n                    Add New\n                </Button>\n            )}\n        </div>\n    ]\n    return (\n        <div>\n            <PageHeader\n                ghost={false}\n                title=\"Locations\"\n                subTitle={`List of all ${locations?.total} Locations.`}\n                onBack={() => window.history.back()}\n                extra={headerButtons}\n            >\n                <Table\n                    rowKey=\"_id\"\n                    bordered={false}\n                    className=\"table-responsive\"\n                    loading={isLoading}\n                    dataSource={locations.data}\n                    columns={columns}\n                    // scroll={{ y: window.innerHeight / 2  }}\n                    pagination={{\n                        total: locations.total,\n                        current: locations.page,\n                        onChange: async (pageNo, perPageNo) => await getLocations(pageNo, perPageNo)\n                    }} />\n            </PageHeader>\n        </div>\n    )\n}\n\nexport default LocationList;\n","import React from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {Button} from \"../../../components/buttons/buttons\";\nimport {Col, Form, Input, Modal, Select} from \"antd\";\n\nconst LocationForm = ({form, state, location, addLocation, updateLocation, countries, getCities, isLoading, handleOk}) => {\n    const dispatch = useDispatch()\n    const cities = useSelector(state => state.utilities.cities);\n    const layout = { labelCol: { span: 8 }, wrapperCol: { span: 16 }}\n\n    const validateMessages = {\n        required: '${label} is required!',\n    };\n\n    const handleSubmit = async (data) => {\n        if (location._id){\n            Object.assign(data, {_id: location._id});\n            await dispatch(updateLocation(data, handleOk))\n        } else\n            await dispatch(addLocation(data, handleOk));\n    };\n\n    const onChangeCountry = async (event) => {\n        dispatch(getCities({countryId: event}))\n    }\n\n    const footerButtons = [\n        <Button\n            form=\"myForm\"\n            key=\"submit\"\n            htmlType=\"submit\"\n            type=\"primary\"\n            disabled={isLoading}\n            size=\"medium\">\n            {isLoading ? 'Loading...' : 'Submit'}\n        </Button>\n    ];\n    return (\n        <Col md={12}>\n            <Modal\n                type={state.modalType}\n                title=\"Location Form\"\n                visible={state.visible}\n                onCancel={() => handleOk()}\n                footer={footerButtons}\n            >\n                <Form\n                    {...layout}\n                    name={'locationForm'}\n                    form={form}\n                    id={'myForm'}\n                    validateMessages={validateMessages}\n                    onFinish={handleSubmit}>\n                    <Form.Item\n                        name=\"name\"\n                        rules={[{required: true}]}\n                        initialValue={location.name ? location.name : null}\n                        label=\"Name\">\n                        <Input placeholder=\"Name\"/>\n                    </Form.Item>\n                    <Form.Item\n                        name=\"country\"\n                        initialValue={location?.country?._id ? location.country._id : ''}\n                        rules={[{ required: true }]}\n                        label=\"Country\">\n                        <Select onChange={(event) => {getCities({countryId: event}); form.setFieldsValue({city: \"\"})}}>\n                            <Select.Option value=\"\">Country</Select.Option>\n                            {countries.length && countries.map((country) => (\n                                <Select.Option key={country._id} value={country._id}>{country.name}</Select.Option>\n                            ))}\n                        </Select>\n                    </Form.Item>\n                    <Form.Item\n                        name=\"city\"\n                        initialValue={location?.city?._id ? location.city._id : ''}\n                        rules={[{ required: true }]}\n                        label=\"City\">\n                        <Select>\n                            <Select.Option value=\"\">City</Select.Option>\n                            {cities.length && cities.map((city) => (\n                                <Select.Option key={city._id} value={city._id}>{city.name}</Select.Option>\n                            ))}\n                        </Select>\n                    </Form.Item>\n                    <Form.Item\n                        name=\"latitude\"\n                        initialValue={location.latitude ? location.latitude : null}\n                        label=\"Latitude\">\n                        <Input placeholder=\"Latitude\"/>\n                    </Form.Item>\n                    <Form.Item\n                        name=\"longitude\"\n                        initialValue={location.longitude ? location.longitude : null}\n                        label=\"Longitude\">\n                        <Input placeholder=\"Longitude\"/>\n                    </Form.Item>\n                    <Form.Item\n                        name=\"code\"\n                        initialValue={location.code ? location.code : null}\n                        rules={[{ required: true }]}\n                        label=\"Code\">\n                        <Input placeholder=\"Code\"/>\n                    </Form.Item>\n                    <Form.Item\n                        name=\"status\"\n                        initialValue={location.status ? location.status : ''}\n                        rules={[{ required: true }]}\n                        label=\"Status\">\n                        <Select>\n                            <Select.Option value=\"\">Status</Select.Option>\n                            <Select.Option value=\"active\">Active</Select.Option>\n                            <Select.Option value=\"inactive\">Inactive</Select.Option>\n                        </Select>\n                    </Form.Item>\n                </Form>\n            </Modal>\n\n        </Col>\n    )\n}\n\nexport default LocationForm;\n","import actions from './actions'\nimport {RequestService as req} from \"../../../services/requestService\";\nimport { Constants } from \"../../../config/constants\";\n\nconst { fetchLocationAction, fetchLocationsAction, resetLocationFormAction } = actions;\n\nexport const fetchLocations = (queries) => {\n    return async dispatch => {\n        await req.getRequest({ \n            url: `${Constants.WEB_SETUP}locations`,\n            queries, \n            auth: 'bearer'\n        }, (cb) => dispatch(fetchLocationsAction(cb)))\n    };\n};\n\nexport const addLocation = (data, action) => {\n    return async dispatch => {\n        await req.postRequest({ \n            url: `${Constants.WEB_SETUP}locations`,\n            auth: 'bearer', \n            body: data\n        }, async (cb) => {\n            await dispatch(fetchLocations({page: 1, perPage: 10}));\n            await dispatch(action);\n        })\n    };\n};\n\nexport const updateLocation = (data, action) => {\n    return async dispatch => {\n        await req.putRequest({ \n            url: `${Constants.WEB_SETUP}locations/${data._id}`,\n            auth: 'bearer', \n            body: data\n        }, async (cb) => {\n            await dispatch(fetchLocations({page: 1, perPage: 10}));\n            await dispatch(action);\n        })\n    };\n};\n\nexport const resetLocationForm = () => dispatch => dispatch(resetLocationFormAction());\nexport const fetchLocation = (_id, action) => {\n    return async dispatch => {\n        await req.getRequest({ \n            url: `${Constants.WEB_SETUP}locations/${_id}`,\n            auth: 'bearer'\n        }, async (cb) => {\n            await dispatch(fetchLocationAction(cb));\n            await dispatch(action);\n        })\n    };\n};\n\nexport const deleteLocation = (_id) => {\n    return async dispatch => {\n        await req.deleteRequest({ \n            url: `${Constants.WEB_SETUP}locations/${_id}`,\n            auth: 'bearer'\n        }, (cb) => dispatch(fetchLocations({page: 1, perPage: 10})))\n    };\n};\n","import React, {useState, useEffect} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {Main} from \"../../styled\";\nimport {Form} from \"antd\";\nimport LocationList from \"./list\";\nimport LocationForm from \"./form\";\nimport {\n    addLocation,\n    fetchLocations,\n    fetchLocation,\n    updateLocation,\n    deleteLocation,\n    resetLocationForm} from \"../../../redux/webSetup/locations/actionCreator\";\n\nimport {fetchCountries, fetchCities} from \"../../../redux/utilities/actionCreator\";\n\nconst LocationData = () => {\n    const dispatch = useDispatch();\n    const isLoading = useSelector(state => state.utilities.loading);\n    const locations = useSelector(state => state.wsLocations.locations);\n    const location = useSelector(state => state.wsLocations.location);\n    const countries = useSelector(state => state.utilities.countries);\n    const [form] = Form.useForm()\n\n    const [state, setState] = useState({\n        visible: false,\n        modalType: 'primary',\n        colorModal: false,\n        uploading: false,\n    });\n\n    useEffect(() => {\n        const fetchData = async () => {\n            await dispatch(fetchLocations({page: 1, perPage: 10}))\n        };\n        fetchData().then(r => {});\n    }, []);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            await dispatch(fetchCountries())\n        };\n        fetchData().then(r => {});\n    }, []);\n\n    const getLocations = async (page, perPage) => await dispatch(fetchLocations({page, perPage}));\n    const getLocationInfo = async (_id) => dispatch(fetchLocation(_id, showModalEdit));\n\n    const getCities = async (queries) => await dispatch(fetchCities(queries));\n    const showModal = async type => {\n        await setState({\n            ...state,\n            visible: true,\n            modalType: type,\n        });\n        await dispatch(resetLocationForm());\n        await form.resetFields();\n    };\n\n    const showModalEdit = async () => {\n        await setState({\n            ...state,\n            visible: true,\n            modalType: \"primary\",\n        });\n        await form.resetFields();\n    };\n\n    const handleOk = () => {\n        setState({\n            ...state,\n            visible: false,\n            colorModal: false,\n        });\n    };\n    return (\n        <Main>\n            <LocationList\n                state={state}\n                setState={setState}\n                showModal={showModal}\n                isLoading={isLoading}\n                locations={locations}\n                getLocations={getLocations}\n                getLocationInfo={getLocationInfo}\n                deleteLocation={deleteLocation}\n                getCities={getCities}/>\n\n            <LocationForm\n                form={form}\n                state={state}\n                location={location}\n                addLocation={addLocation}\n                updateLocation={updateLocation}\n                getCities={getCities}\n                countries={countries}\n                handleOk={handleOk}\n                isLoading={isLoading}/>\n        </Main>\n    )\n}\n\nexport default LocationData;\n"],"sourceRoot":""}