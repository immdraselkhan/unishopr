{"version":3,"sources":["container/userManagement/roles/form.js","container/userManagement/roles/list.js","redux/userManagement/roles/actionCreator.js","container/userManagement/roles/index.js"],"names":["RoleForm","form","state","role","addRole","updateRole","isLoading","handleOk","dispatch","useDispatch","handleSubmit","data","_id","Object","assign","footerButtons","key","htmlType","type","disabled","size","md","modalType","title","visible","onCancel","footer","labelCol","span","wrapperCol","name","id","validateMessages","required","onFinish","Item","rules","initialValue","label","placeholder","description","TextArea","status","Constants","STATUS","map","si","Option","value","RoleList","showModal","roles","getRoles","roleInfo","deleteRole","columns","dataIndex","className","render","Scope","checkScopes","icon","onClick","Alert","confirm","action","headerButtons","ghost","subTitle","total","onBack","window","history","back","extra","rowKey","bordered","loading","dataSource","pagination","current","page","onChange","pageNo","perPageNo","fetchRolesAction","actions","fetchRoleAction","resetRoleFormAction","req","postRequest","url","USER_MANAGEMENT","auth","body","cb","fetchRoles","perPage","queries","getRequest","putRequest","deleteRequest","RolesData","useSelector","utilities","umRoles","useForm","useState","setState","useEffect","fetchData","then","r","resetFields","showModalEdit","fetchRole"],"mappings":"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","file":"static/js/27.3bde5c01.chunk.js","sourcesContent":["import {Modal} from \"../../../components/modals/antd-modals\";\nimport {Button} from \"../../../components/buttons/buttons\";\nimport {Col, Form, Input, Select} from \"antd\";\nimport React from \"react\";\nimport {useDispatch} from \"react-redux\";\nimport {Constants} from \"../../../config/constants\";\n\nconst RoleForm = (\n    {\n        form,\n        state,\n        role,\n        addRole,\n        updateRole,\n        isLoading,\n        handleOk\n    }\n) => {\n    const dispatch = useDispatch();\n    const layout = { labelCol: { span: 8 }, wrapperCol: { span: 16 } };\n    const validateMessages = { required: '${label} is required!' };\n\n    const handleSubmit = async (data) => {\n        if (role._id){\n            Object.assign(data, {_id: role._id});\n            await dispatch(updateRole(data, handleOk))\n        } else\n            await dispatch(addRole(data, handleOk));\n    };\n\n    const footerButtons = [\n        <Button\n            form=\"myForm\"\n            key=\"submit\"\n            htmlType=\"submit\"\n            type=\"primary\"\n            disabled={isLoading}\n            size=\"medium\"\n        >\n            {isLoading ? 'Loading...' : 'Submit'}\n        </Button>\n    ];\n\n    return (\n        <Col md={12}>\n            <Modal\n                type={state.modalType}\n                title=\"Role Form\"\n                visible={state.visible}\n                onCancel={() => handleOk()}\n                footer={footerButtons}\n            >\n                <Form\n                    {...layout}\n                    name=\"roleForm\"\n                    form={form}\n                    id=\"myForm\"\n                    validateMessages={validateMessages}\n                    onFinish={handleSubmit}\n                >\n                    <Form.Item\n                        name=\"name\"\n                        rules={[{ required: true }]}\n                        initialValue={role.name ? role.name : null}\n                        label=\"Name\"\n                    >\n                        <Input placeholder=\"Name\"/>\n                    </Form.Item>\n                    <Form.Item\n                        name=\"description\"\n                        initialValue={role.description ? role.description : null}\n                        rules={[{ required: true }]}\n                        label=\"Description\"\n                    >\n                        <Input.TextArea placeholder=\"Description\"/>\n                    </Form.Item>\n                    <Form.Item\n                        name=\"status\"\n                        initialValue={role.status ? role.status : ''}\n                        rules={[{ required: true }]}\n                        label=\"Status\"\n                    >\n                        <Select>\n                            {Constants.STATUS.map((status, si) => (\n                                <Select.Option key={si} value={status.value}>{status.label}</Select.Option>\n                            ))}\n                        </Select>\n                    </Form.Item>\n                </Form>\n            </Modal>\n        </Col>\n    )\n}\n\nexport default RoleForm;\n","import {Button as AntButton, Table} from \"antd\";\nimport React from \"react\";\nimport FontAwesome from \"react-fontawesome\";\nimport {Alert} from \"../../../services/alertService\";\nimport { PageHeader } from 'antd';\nimport {Button} from \"../../../components/buttons/buttons\";\nimport FeatherIcon from \"feather-icons-react\";\nimport {Scope} from \"../../../services/scopeService\";\n\nconst RoleList = (\n    {\n        showModal,\n        isLoading,\n        roles,\n        getRoles,\n        roleInfo,\n        deleteRole\n    }\n) => {\n    const columns = [\n        {\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n        },\n        {\n            title: 'Description',\n            dataIndex: 'description',\n            key: 'description',\n        },\n        {\n            title: 'Status',\n            dataIndex: 'status',\n            key: 'status',\n        },\n        {\n            title: <div className=\"text-right\">Action</div>,\n            dataIndex: '_id',\n            key: '_id',\n            render: (key) => <div className=\"text-right\">\n                {Scope.checkScopes(['um_roles_update']) && (\n                    <AntButton\n                        size=\"small\"\n                        type=\"ghost\"\n                        className=\"minimum-mr color-info border-info\"\n                        icon={<FontAwesome name={\"edit\"} />}\n                        onClick={() => roleInfo(key)}\n                    />\n                )}\n                {Scope.checkScopes(['um_roles_delete']) && (\n                    <AntButton\n                        size=\"small\"\n                        type=\"ghost\"\n                        className=\"color-danger border-danger\"\n                        icon={<FontAwesome name={\"trash\"} />}\n                        onClick={() => Alert.confirm({action: deleteRole(key)})}\n                    />\n                )}\n            </div>\n        },\n    ];\n\n    const headerButtons = [\n        <div key=\"1\" className=\"page-header-actions\">\n            {Scope.checkScopes(['um_roles_create']) && (\n                <Button size=\"medium\" type=\"primary\" onClick={() => showModal('primary')}>\n                    <FeatherIcon icon=\"plus\" size={14} />\n                    Add New\n                </Button>\n            )}\n        </div>,\n    ];\n\n    return (\n        <div>\n            <PageHeader\n                ghost={false}\n                title=\"Roles\"\n                subTitle={`List of all ${roles.total} roles.`}\n                onBack={() => window.history.back()}\n                extra={headerButtons}\n            >\n                <Table\n                    rowKey=\"_id\"\n                    bordered={false}\n                    className=\"table-responsive\"\n                    loading={isLoading}\n                    dataSource={roles.data}\n                    columns={columns}\n                    // scroll={{ y: window.innerHeight / 2  }}\n                    pagination={{\n                        total: roles.total,\n                        current: roles.page,\n                        onChange: async (pageNo, perPageNo) => await getRoles(pageNo, perPageNo)\n                    }}\n                />\n            </PageHeader>\n        </div>\n    )\n}\n\nexport default RoleList;\n","import actions from './actions';\nimport {RequestService as req} from '../../../services/requestService';\nimport { Constants } from '../../../config/constants';\n\nconst { fetchRolesAction, fetchRoleAction, resetRoleFormAction } = actions;\n\nexport const addRole = (data, action) => {\n    return async dispatch => {\n        await req.postRequest({\n            url: `${Constants.USER_MANAGEMENT}roles`,\n            auth: 'bearer',\n            body: data\n        }, async (cb) => {\n            await dispatch(fetchRoles({page: 1, perPage: 10}));\n            if (action) await action();\n        })\n    };\n};\n\nexport const fetchRoles = (queries) => {\n    return async dispatch => {\n        await req.getRequest({\n            url: `${Constants.USER_MANAGEMENT}roles`,\n            queries,\n            auth: 'bearer'\n        }, (cb) => dispatch(fetchRolesAction(cb)))\n    };\n};\n\nexport const updateRole = (data, action) => {\n    return async dispatch => {\n        await req.putRequest({\n            url: `${Constants.USER_MANAGEMENT}roles/${data._id}`,\n            auth: 'bearer',\n            body: data\n        },  async (cb) => {\n            await dispatch(fetchRoles({page: 1, perPage: 10}));\n            if (action) await action();\n        })\n    };\n};\n\nexport const resetRoleForm = () => dispatch => dispatch(resetRoleFormAction());\nexport const fetchRole = (_id, action) => {\n    return async dispatch => {\n        await req.getRequest({\n            url: `${Constants.USER_MANAGEMENT}roles/${_id}`,\n            auth: 'bearer'\n        }, async (cb) => {\n            await dispatch(fetchRoleAction(cb));\n            if (action) await action();\n        })\n    };\n};\n\nexport const deleteRole = (_id) => {\n    return async dispatch => {\n        await req.deleteRequest({\n            url: `${Constants.USER_MANAGEMENT}roles/${_id}`,\n            auth: 'bearer'\n        }, (cb) => dispatch(fetchRoles({page: 1, perPage: 10})))\n    };\n};\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Form } from 'antd';\nimport RoleForm from \"./form\";\nimport RoleList from \"./list\";\nimport { Main } from '../../styled';\nimport {\n    addRole,\n    fetchRoles,\n    deleteRole,\n    fetchRole,\n    updateRole,\n    resetRoleForm\n} from '../../../redux/userManagement/roles/actionCreator';\n\nconst RolesData = () => {\n    const dispatch = useDispatch();\n    const isLoading = useSelector(state => state.utilities.loading);\n    const roles = useSelector(state => state.umRoles.roles);\n    const role = useSelector(state => state.umRoles.role);\n    const [form] = Form.useForm();\n\n    const [state, setState] = useState({ visible: false });\n\n    useEffect(() => {\n        const fetchData = async () => {\n            await dispatch(fetchRoles({page: 1, perPage: 10}))\n        };\n        fetchData().then(r => {});\n    }, [dispatch]);\n\n    const getRoles = async (page, perPage) => await dispatch(fetchRoles({page, perPage}));\n    const roleInfo = (_id) => dispatch(fetchRole(_id, showModalEdit));\n\n    const showModal = async type => {\n        await setState({ ...state, visible: true });\n        await dispatch(resetRoleForm());\n        await form.resetFields();\n    };\n\n    const showModalEdit = async () => {\n        await setState({ ...state, visible: true });\n        await form.resetFields();\n    };\n\n    const handleOk = () => {\n        setState({ ...state, visible: false });\n    };\n\n    return (\n        <Main>\n            <RoleForm\n                form={form}\n                state={state}\n                role={role}\n                addRole={addRole}\n                updateRole={updateRole}\n                handleOk={handleOk}\n                isLoading={isLoading}\n            />\n\n            <RoleList\n                state={state}\n                setState={setState}\n                showModal={showModal}\n                isLoading={isLoading}\n                roles={roles}\n                getRoles={getRoles}\n                roleInfo={roleInfo}\n                deleteRole={deleteRole}\n            />\n        </Main>\n    );\n};\n\nexport default RolesData;\n"],"sourceRoot":""}