{"version":3,"sources":["container/userManagement/teams/list.js","container/userManagement/teams/form.js","redux/userManagement/teams/actionCreator.js","container/userManagement/teams/index.js"],"names":["TeamList","showModal","isLoading","teams","getTeams","getTeamInfo","deleteTeam","columns","title","dataIndex","key","className","render","Scope","checkScopes","size","type","icon","name","onClick","Alert","confirm","action","headerButtons","ghost","subTitle","total","onBack","window","history","back","extra","rowKey","bordered","loading","dataSource","data","pagination","current","page","onChange","pageNo","perPageNo","TeamForm","form","state","team","addTeam","updateTeam","handleOk","dispatch","useDispatch","handleSubmit","_id","Object","assign","footerButtons","htmlType","disabled","md","modalType","visible","onCancel","footer","labelCol","span","wrapperCol","id","validateMessages","required","onFinish","Item","rules","initialValue","label","placeholder","description","TextArea","status","Constants","STATUS","map","si","Option","value","fetchTeamsAction","actions","fetchTeamAction","resetTeamFormAction","req","postRequest","url","USER_MANAGEMENT","auth","body","cb","fetchTeams","perPage","queries","getRequest","putRequest","deleteRequest","TeamsData","useSelector","utilities","umTeams","useForm","useState","setState","useEffect","fetchData","then","r","resetFields","showModalEdit","fetchTeam"],"mappings":"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","file":"static/js/28.551d6966.chunk.js","sourcesContent":["import React from \"react\";\nimport {Scope} from \"../../../services/scopeService\";\nimport FontAwesome from \"react-fontawesome\";\nimport {Alert} from \"../../../services/alertService\";\nimport {Button} from \"../../../components/buttons/buttons\";\nimport FeatherIcon from \"feather-icons-react\";\nimport {Button as AntButton, PageHeader, Table} from \"antd\";\n\nconst TeamList = (\n    {\n        showModal,\n        isLoading,\n        teams,\n        getTeams,\n        getTeamInfo,\n        deleteTeam\n    }\n) => {\n    const columns = [\n        {\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n        },\n        {\n            title: 'Description',\n            dataIndex: 'description',\n            key: 'description',\n        },\n        {\n            title: 'Status',\n            dataIndex: 'status',\n            key: 'status',\n        },\n        {\n            title: <div className=\"text-right\">Action</div>,\n            dataIndex: '_id',\n            key: '_id',\n            render: (key) => <div className=\"text-right\">\n                {Scope.checkScopes(['um_teams_update']) && (\n                    <AntButton\n                        size=\"small\"\n                        type=\"ghost\"\n                        className=\"minimum-mr color-info border-info\"\n                        icon={<FontAwesome name={\"edit\"} />}\n                        onClick={() => getTeamInfo(key)}\n                    />\n                )}\n                {Scope.checkScopes(['um_teams_delete']) && (\n                    <AntButton\n                        size=\"small\"\n                        type=\"ghost\"\n                        className=\"color-danger border-danger\"\n                        icon={<FontAwesome name={\"trash\"} />}\n                        onClick={() => Alert.confirm({action: deleteTeam(key)})}\n                    />\n                )}\n            </div>\n        },\n    ];\n\n    const headerButtons = [\n        <div key=\"1\" className=\"page-header-action\">\n            {Scope.checkScopes(['um_teams_create']) && (\n                <Button size=\"medium\" type=\"primary\" onClick={() => showModal('primary')}>\n                    <FeatherIcon icon=\"plus\" size={14}/>\n                    Add New\n                </Button>\n            )}\n        </div>\n    ];\n\n    return (\n        <div>\n            <PageHeader\n                ghost={false}\n                title=\"Teams\"\n                subTitle={`List of all ${teams?.total} Teams.`}\n                onBack={() => window.history.back()}\n                extra={headerButtons}\n            >\n                <Table\n                    rowKey=\"_id\"\n                    bordered={false}\n                    className=\"table-responsive\"\n                    loading={isLoading}\n                    dataSource={teams.data}\n                    columns={columns}\n                    // scroll={{ y: window.innerHeight / 2  }}\n                    pagination={{\n                        total: teams.total,\n                        current: teams.page,\n                        onChange: async (pageNo, perPageNo) => await getTeams(pageNo, perPageNo)\n                    }}\n                />\n            </PageHeader>\n        </div>\n    )\n}\n\nexport default TeamList;\n","import React from \"react\";\nimport {useDispatch} from \"react-redux\";\nimport {Button} from \"../../../components/buttons/buttons\";\nimport {Col, Form, Input, Modal, Select} from \"antd\";\nimport {Constants} from \"../../../config/constants\";\n\nconst TeamForm = (\n    {\n        form,\n        state,\n        team,\n        addTeam,\n        updateTeam,\n        isLoading,\n        handleOk\n    }\n) => {\n    const dispatch = useDispatch()\n    const layout = { labelCol: { span: 8 }, wrapperCol: { span: 16 }}\n    const validateMessages = { required: '${label} is required!' };\n\n    const handleSubmit = async (data) => {\n        if (team._id){\n            Object.assign(data, {_id: team._id});\n            await dispatch(updateTeam(data, handleOk))\n        } else\n            await dispatch(addTeam(data, handleOk));\n    };\n\n    const footerButtons = [\n        <Button\n            form=\"myForm\"\n            key=\"submit\"\n            htmlType=\"submit\"\n            type=\"primary\"\n            disabled={isLoading}\n            size=\"medium\"\n        >\n            {isLoading ? 'Loading...' : 'Submit'}\n        </Button>\n    ];\n\n    return (\n        <Col md={12}>\n            <Modal\n                type={state.modalType}\n                title=\"Team Form\"\n                visible={state.visible}\n                onCancel={() => handleOk()}\n                footer={footerButtons}\n            >\n                <Form\n                    {...layout}\n                    name={'teamForm'}\n                    form={form}\n                    id={'myForm'}\n                    validateMessages={validateMessages}\n                    onFinish={handleSubmit}\n                >\n                    <Form.Item\n                        name=\"name\"\n                        rules={[{required: true}]}\n                        initialValue={team.name ? team.name : null}\n                        label=\"Name\"\n                    >\n                        <Input placeholder=\"name\"/>\n                    </Form.Item>\n                    <Form.Item\n                        name=\"description\"\n                        initialValue={team.description ? team.description : null}\n                        rules={[{ required: true }]}\n                        label=\"Description\"\n                    >\n                        <Input.TextArea placeholder=\"Description\"/>\n                    </Form.Item>\n                    <Form.Item\n                        name=\"status\"\n                        initialValue={team.status ? team.status : ''}\n                        rules={[{ required: true }]}\n                        label=\"Status\"\n                    >\n                        <Select>\n                            {Constants.STATUS.map((status, si) => (\n                                <Select.Option key={si} value={status.value}>{status.label}</Select.Option>\n                            ))}\n                        </Select>\n                    </Form.Item>\n                </Form>\n            </Modal>\n        </Col>\n    )\n}\n\nexport default TeamForm;\n","import actions from './actions'\nimport {RequestService as req} from \"../../../services/requestService\";\nimport { Constants } from \"../../../config/constants\";\n\nconst { fetchTeamsAction, fetchTeamAction, resetTeamFormAction } = actions;\n\nexport const addTeam = (data, action) => {\n    return async dispatch => {\n        await req.postRequest({\n            url: `${Constants.USER_MANAGEMENT}teams`,\n            auth: 'bearer',\n            body: data\n        }, async (cb) => {\n            await dispatch(fetchTeams({page: 1, perPage: 10}));\n            await dispatch(action);\n        })\n    };\n};\n\nexport const fetchTeams = (queries) => {\n    return async dispatch => {\n        await req.getRequest({\n            url: `${Constants.USER_MANAGEMENT}teams`,\n            queries,\n            auth: 'bearer'\n        },(cb) => dispatch(fetchTeamsAction(cb)))\n    };\n};\n\nexport const updateTeam = (data, action) => {\n    return async dispatch => {\n        await req.putRequest({\n            url: `${Constants.USER_MANAGEMENT}teams/${data._id}`,\n            auth: 'bearer',\n            body: data\n        },  async (cb) => {\n            await dispatch(fetchTeams({page: 1, perPage: 10}));\n            await dispatch(action);\n        })\n    };\n};\n\nexport const resetTeamForm = () => dispatch => dispatch(resetTeamFormAction());\nexport const fetchTeam = (_id, action) => {\n    return async dispatch => {\n        await req.getRequest({\n            url: `${Constants.USER_MANAGEMENT}teams/${_id}`,\n            auth: 'bearer'\n        }, async (cb) => {\n            await dispatch(fetchTeamAction(cb));\n            await dispatch(action);\n        })\n    };\n};\n\nexport const deleteTeam = (_id) => {\n    return async dispatch => {\n        await req.deleteRequest({\n            url: `${Constants.USER_MANAGEMENT}teams/${_id}`,\n            auth: 'bearer'\n        }, (cb) => dispatch(fetchTeams({page: 1, perPage: 10})))\n    };\n};\n","import React, {useState, useEffect} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {Main} from \"../../styled\";\nimport {Form} from \"antd\";\nimport TeamList from \"./list\";\nimport TeamForm from \"./form\";\nimport {\n    addTeam,\n    fetchTeams,\n    fetchTeam,\n    updateTeam,\n    deleteTeam,\n    resetTeamForm\n} from \"../../../redux/userManagement/teams/actionCreator\";\n\nconst TeamsData = () => {\n    const dispatch = useDispatch();\n    const isLoading = useSelector(state => state.utilities.loading);\n    const teams = useSelector(state => state.umTeams.teams);\n    const team = useSelector(state => state.umTeams.team);\n    const [form] = Form.useForm()\n\n    const [state, setState] = useState({ visible: false });\n\n    useEffect(() => {\n        const fetchData = async () => {\n            await dispatch(fetchTeams({page: 1, perPage: 10}))\n        };\n        fetchData().then(r => {});\n    }, [dispatch]);\n\n    const getTeams = async (page, perPage) => await dispatch(fetchTeams({page, perPage}));\n    const getTeamInfo = (_id) => dispatch(fetchTeam(_id, showModalEdit));\n    const showModal = async type => {\n        await setState({ ...state, visible: true });\n        await dispatch(resetTeamForm());\n        await form.resetFields();\n    };\n\n    const showModalEdit = async () => {\n        await setState({ ...state, visible: true });\n        await form.resetFields();\n    };\n\n    const handleOk = () => {\n        setState({ ...state, visible: false });\n    };\n\n    return (\n        <Main>\n            <TeamList\n                state={state}\n                setState={setState}\n                showModal={showModal}\n                isLoading={isLoading}\n                teams={teams}\n                getTeams={getTeams}\n                getTeamInfo={getTeamInfo}\n                deleteTeam={deleteTeam}\n            />\n\n            <TeamForm\n                form={form}\n                state={state}\n                team={team}\n                addTeam={addTeam}\n                updateTeam={updateTeam}\n                handleOk={handleOk}\n                isLoading={isLoading}\n            />\n        </Main>\n    )\n}\n\nexport default TeamsData;\n"],"sourceRoot":""}