{"version":3,"sources":["container/userManagement/departments/list.js","container/userManagement/departments/form.js","redux/userManagement/departments/actionCreator.js","container/userManagement/departments/index.js"],"names":["DepartmentList","showModal","isLoading","departments","getDepartments","getDepartmentInfo","deleteDepartment","columns","title","dataIndex","key","className","render","Scope","checkScopes","size","type","icon","name","onClick","Alert","confirm","action","headerButtons","ghost","subTitle","total","onBack","window","history","back","extra","rowKey","bordered","loading","dataSource","data","pagination","current","page","onChange","pageNo","perPageNo","DepartmentForm","form","state","department","addDepartment","updateDepartment","handleOk","dispatch","useDispatch","handleSubmit","_id","Object","assign","footerButtons","htmlType","disabled","md","visible","onCancel","footer","labelCol","span","wrapperCol","id","validateMessages","required","onFinish","Item","rules","initialValue","label","placeholder","description","TextArea","status","Constants","STATUS","map","si","Option","value","fetchDepartmentAction","actions","fetchDepartmentsAction","resetDepartmentFormAction","req","postRequest","url","USER_MANAGEMENT","auth","body","cb","fetchDepartments","perPage","queries","getRequest","putRequest","deleteRequest","DepartmentsData","useSelector","utilities","umDepartments","useForm","useState","uploading","setState","useEffect","fetchData","then","r","resetFields","showModalEdit","fetchDepartment"],"mappings":";wmNAQA,IA4FeA,EA5FQ,SAAC,GASlB,IAPEC,EAOH,EAPGA,UACAC,EAMH,EANGA,UACAC,EAKH,EALGA,YACAC,EAIH,EAJGA,eACAC,EAGH,EAHGA,kBACAC,EAEH,EAFGA,iBAGEC,EAAU,CACZ,CACIC,MAAO,OACPC,UAAW,OACXC,IAAK,QAET,CACIF,MAAO,cACPC,UAAW,cACXC,IAAK,eAET,CACIF,MAAO,SACPC,UAAW,SACXC,IAAK,UAET,CACIF,MAAO,yBAAKG,UAAU,cAAf,UACPF,UAAW,MACXC,IAAK,MACLE,OAAQ,SAACF,GAAD,OAAS,yBAAKC,UAAU,cAC3BE,IAAMC,YAAY,CAAC,2BAChB,uBACIC,KAAK,QACLC,KAAK,QACLL,UAAU,oCACVM,KAAM,kBAAC,IAAD,CAAaC,KAAM,SACzBC,QAAS,kBAAMd,EAAkBK,MAGxCG,IAAMC,YAAY,CAAC,2BAChB,uBACIC,KAAK,QACLC,KAAK,QACLL,UAAU,6BACVM,KAAM,kBAAC,IAAD,CAAaC,KAAM,UACzBC,QAAS,kBAAMC,IAAMC,QAAQ,CAACC,OAAQhB,EAAiBI,YAOrEa,EAAgB,CAClB,yBAAKb,IAAI,IAAIC,UAAU,sBAClBE,IAAMC,YAAY,CAAC,2BAChB,kBAAC,IAAD,CAAQC,KAAK,SAASC,KAAK,UAAUG,QAAS,kBAAMlB,EAAU,aAC1D,kBAAC,IAAD,CAAagB,KAAK,OAAOF,KAAM,KADnC,aAQZ,OACI,6BACI,uBACIS,OAAO,EACPhB,MAAM,cACNiB,SAAQ,6BAAiBtB,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAauB,MAA9B,iBACRC,OAAQ,kBAAMC,OAAOC,QAAQC,QAC7BC,MAAOR,GAEP,uBACIS,OAAO,MACPC,UAAU,EACVtB,UAAU,mBACVuB,QAAShC,EACTiC,WAAYhC,EAAYiC,KACxB7B,QAASA,EAET8B,WAAY,CACRX,MAAOvB,EAAYuB,MACnBY,QAASnC,EAAYoC,KACrBC,SAAS,WAAD,4BAAE,WAAOC,EAAQC,GAAf,iFAAmCtC,EAAeqC,EAAQC,GAA1D,mFAAF,qDAAC,S,w3MCtFjC,IAuFeC,EAvFQ,SAAC,GAUlB,IAREC,EAQH,EARGA,KACAC,EAOH,EAPGA,MACAC,EAMH,EANGA,WACAC,EAKH,EALGA,cACAC,EAIH,EAJGA,iBACA9C,EAGH,EAHGA,UACA+C,EAEH,EAFGA,SAGEC,EAAWC,cAIXC,EAAY,uCAAG,WAAOhB,GAAP,qEACbU,EAAWO,IADE,uBAEbC,OAAOC,OAAOnB,EAAM,CAACiB,IAAKP,EAAWO,MAFxB,SAGPH,EAASF,EAAiBZ,EAAMa,IAHzB,6CAKPC,EAASH,EAAcX,EAAMa,IALtB,2CAAH,sDAQZO,EAAgB,CAClB,kBAAC,IAAD,CACIZ,KAAK,SACLlC,IAAI,SACJ+C,SAAS,SACTzC,KAAK,UACL0C,SAAUxD,EACVa,KAAK,UAEJb,EAAY,aAAe,WAIpC,OACI,uBAAKyD,GAAI,IACL,uBACI3C,KAAM,UACNR,MAAM,mBACNoD,QAASf,EAAMe,QACfC,SAAU,kBAAMZ,KAChBa,OAAQN,GAER,uCAjCG,CAAEO,SAAU,CAAEC,KAAM,GAAKC,WAAY,CAAED,KAAM,KAiChD,CAEI9C,KAAM,iBACN0B,KAAMA,EACNsB,GAAI,SACJC,iBArCS,CAAEC,SAAU,yBAsCrBC,SAAUjB,IAEV,sBAAMkB,KAAN,CACIpD,KAAK,OACLqD,MAAO,CAAC,CAACH,UAAU,IACnBI,aAAc1B,EAAW5B,KAAO4B,EAAW5B,KAAO,KAClDuD,MAAM,QAEN,uBAAOC,YAAY,UAEvB,sBAAMJ,KAAN,CACIpD,KAAK,cACLsD,aAAc1B,EAAW6B,YAAc7B,EAAW6B,YAAc,KAChEJ,MAAO,CAAC,CAAEH,UAAU,IACpBK,MAAM,eAEN,sBAAOG,SAAP,CAAgBF,YAAY,iBAEhC,sBAAMJ,KAAN,CACIpD,KAAK,SACLsD,aAAc1B,EAAW+B,OAAS/B,EAAW+B,OAAS,GACtDN,MAAO,CAAC,CAAEH,UAAU,IACpBK,MAAM,UAEN,2BACKK,IAAUC,OAAOC,KAAI,SAACH,EAAQI,GAAT,OAClB,sBAAQC,OAAR,CAAexE,IAAKuE,EAAIE,MAAON,EAAOM,OAAQN,EAAOJ,gB,0zMC/ErF,IAAQW,EAA6EC,IAA7ED,sBAAuBE,EAAsDD,IAAtDC,uBAAwBC,EAA8BF,IAA9BE,0BAE1CxC,EAAgB,SAACX,EAAMd,GAChC,8CAAO,WAAM4B,GAAN,iFACGsC,IAAIC,YAAY,CAClBC,IAAI,GAAD,OAAKZ,IAAUa,gBAAf,eACHC,KAAM,SACNC,KAAMzD,GAHJ,uCAIH,WAAO0D,GAAP,iFACO5C,EAAS6C,EAAiB,CAACxD,KAAM,EAAGyD,QAAS,MADpD,WAEK1E,EAFL,gCAEmBA,IAFnB,2CAJG,uDADH,2CAAP,uDAYSyE,EAAmB,SAACE,GAC7B,8CAAO,WAAM/C,GAAN,iFACGsC,IAAIU,WAAW,CACjBR,IAAI,GAAD,OAAKZ,IAAUa,gBAAf,eACHM,UACAL,KAAM,WACP,SAACE,GAAD,OAAQ5C,EAASoC,EAAuBQ,OALxC,2CAAP,uDASS9C,EAAmB,SAACZ,EAAMd,GACnC,8CAAO,WAAM4B,GAAN,iFACGsC,IAAIW,WAAW,CACjBT,IAAI,GAAD,OAAKZ,IAAUa,gBAAf,uBAA6CvD,EAAKiB,KACrDuC,KAAM,SACNC,KAAMzD,GAHJ,uCAIF,WAAO0D,GAAP,iFACM5C,EAAS6C,EAAiB,CAACxD,KAAM,EAAGyD,QAAS,MADnD,WAEI1E,EAFJ,gCAEkBA,IAFlB,2CAJE,uDADH,2CAAP,uDAyBShB,EAAmB,SAAC+C,GAC7B,8CAAO,WAAMH,GAAN,iFACGsC,IAAIY,cAAc,CACpBV,IAAI,GAAD,OAAKZ,IAAUa,gBAAf,uBAA6CtC,GAChDuC,KAAM,WACP,SAACE,GAAD,OAAQ5C,EAAS6C,EAAiB,CAACxD,KAAM,EAAGyD,QAAS,SAJrD,2CAAP,uD,yyMCqBWK,UA9DS,WACpB,IAAMnD,EAAWC,cACXjD,EAAYoG,aAAY,SAAAzD,GAAK,OAAIA,EAAM0D,UAAUrE,WACjD/B,EAAcmG,aAAY,SAAAzD,GAAK,OAAIA,EAAM2D,cAAcrG,eACvD2C,EAAawD,aAAY,SAAAzD,GAAK,OAAIA,EAAM2D,cAAc1D,cAC5D,EAAe,IAAK2D,UAAb7D,EAAP,oBAEA,EAA0B8D,mBAAS,CAC/B9C,SAAS,EACT+C,WAAW,IAFf,mBAAO9D,EAAP,KAAc+D,EAAd,KAKAC,qBAAU,YACS,uCAAG,8FACR3D,EAAS6C,EAAiB,CAACxD,KAAM,EAAGyD,QAAS,MADrC,2CAAH,qDAGfc,GAAYC,MAAK,SAAAC,SAClB,CAAC9D,IAEJ,IAAM9C,EAAc,uCAAG,WAAOmC,EAAMyD,GAAb,iFAA+B9C,EAAS6C,EAAiB,CAACxD,OAAMyD,aAAhE,mFAAH,wDAEd/F,EAAS,uCAAG,WAAMe,GAAN,iFACR4F,EAAS,2BAAK/D,GAAN,IAAae,SAAS,KADtB,uBAERV,GDI2B,SAAAA,GAAQ,OAAIA,EAASqC,QCNxC,uBAGR3C,EAAKqE,cAHG,2CAAH,sDAMTC,EAAa,uCAAG,8FACZN,EAAS,2BAAK/D,GAAN,IAAae,SAAS,KADlB,uBAEZhB,EAAKqE,cAFO,2CAAH,qDASnB,OACI,kBAAC,IAAD,KACI,kBAAC,EAAD,CACIpE,MAAOA,EACP+D,SAAUA,EACV3G,UAAWA,EACXC,UAAWA,EACXC,YAAaA,EACbC,eAAgBA,EAChBC,kBAzBc,SAACgD,GAAD,OAASH,EDQR,SAACG,EAAK/B,GACjC,8CAAO,WAAM4B,GAAN,iFACGsC,IAAIU,WAAW,CACjBR,IAAI,GAAD,OAAKZ,IAAUa,gBAAf,uBAA6CtC,GAChDuC,KAAM,UAFJ,uCAGH,WAAOE,GAAP,iFACO5C,EAASkC,EAAsBU,IADtC,WAEKxE,EAFL,gCAEmBA,IAFnB,2CAHG,uDADH,2CAAP,sDCT4C6F,CAAgB9D,EAAK6D,KA0BrD5G,iBAAkBA,IAGtB,kBAAC,EAAD,CACIsC,KAAMA,EACNC,MAAOA,EACPC,WAAYA,EACZC,cAAeA,EACfC,iBAAkBA,EAClBC,SAvBK,WACb2D,EAAS,2BAAK/D,GAAN,IAAae,SAAS,MAuBtB1D,UAAWA","file":"static/js/26.112e5417.chunk.js","sourcesContent":["import React from \"react\";\nimport {Scope} from \"../../../services/scopeService\";\nimport FontAwesome from \"react-fontawesome\";\nimport {Alert} from \"../../../services/alertService\";\nimport {Button} from \"../../../components/buttons/buttons\";\nimport FeatherIcon from \"feather-icons-react\";\nimport {PageHeader, Table, Button as AntButton} from \"antd\";\n\nconst DepartmentList = (\n    {\n        showModal,\n        isLoading,\n        departments,\n        getDepartments,\n        getDepartmentInfo,\n        deleteDepartment\n    }\n) => {\n    const columns = [\n        {\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n        },\n        {\n            title: 'Description',\n            dataIndex: 'description',\n            key: 'description',\n        },\n        {\n            title: 'Status',\n            dataIndex: 'status',\n            key: 'status',\n        },\n        {\n            title: <div className=\"text-right\">Action</div>,\n            dataIndex: '_id',\n            key: '_id',\n            render: (key) => <div className=\"text-right\">\n                {Scope.checkScopes(['um_departments_update']) && (\n                    <AntButton\n                        size=\"small\"\n                        type=\"ghost\"\n                        className=\"minimum-mr color-info border-info\"\n                        icon={<FontAwesome name={\"edit\"} />}\n                        onClick={() => getDepartmentInfo(key)}\n                    />\n                )}\n                {Scope.checkScopes(['um_departments_delete']) && (\n                    <AntButton\n                        size=\"small\"\n                        type=\"ghost\"\n                        className=\"color-danger border-danger\"\n                        icon={<FontAwesome name={\"trash\"} />}\n                        onClick={() => Alert.confirm({action: deleteDepartment(key)})}\n                    />\n                )}\n            </div>\n        },\n    ];\n\n    const headerButtons = [\n        <div key=\"1\" className=\"page-header-action\">\n            {Scope.checkScopes(['um_departments_create']) && (\n                <Button size=\"medium\" type=\"primary\" onClick={() => showModal('primary')}>\n                    <FeatherIcon icon=\"plus\" size={14}/>\n                    Add New\n                </Button>\n            )}\n        </div>\n    ];\n\n    return (\n        <div>\n            <PageHeader\n                ghost={false}\n                title=\"Departments\"\n                subTitle={`List of all ${departments?.total} Departments.`}\n                onBack={() => window.history.back()}\n                extra={headerButtons}\n            >\n                <Table\n                    rowKey=\"_id\"\n                    bordered={false}\n                    className=\"table-responsive\"\n                    loading={isLoading}\n                    dataSource={departments.data}\n                    columns={columns}\n                    // scroll={{ y: window.innerHeight / 2  }}\n                    pagination={{\n                        total: departments.total,\n                        current: departments.page,\n                        onChange: async (pageNo, perPageNo) => await getDepartments(pageNo, perPageNo)\n                    }}\n                />\n            </PageHeader>\n        </div>\n    )\n}\n\nexport default DepartmentList;\n","import React from \"react\";\nimport {useDispatch} from \"react-redux\";\nimport {Button} from \"../../../components/buttons/buttons\";\nimport {Col, Form, Input, Modal, Select} from \"antd\";\nimport {Constants} from \"../../../config/constants\";\n\nconst DepartmentForm = (\n    {\n        form,\n        state,\n        department,\n        addDepartment,\n        updateDepartment,\n        isLoading,\n        handleOk\n    }\n) => {\n    const dispatch = useDispatch()\n    const layout = { labelCol: { span: 8 }, wrapperCol: { span: 16 }}\n    const validateMessages = { required: '${label} is required!' };\n\n    const handleSubmit = async (data) => {\n        if (department._id){\n            Object.assign(data, {_id: department._id});\n            await dispatch(updateDepartment(data, handleOk))\n        } else\n            await dispatch(addDepartment(data, handleOk));\n    };\n\n    const footerButtons = [\n        <Button\n            form=\"myForm\"\n            key=\"submit\"\n            htmlType=\"submit\"\n            type=\"primary\"\n            disabled={isLoading}\n            size=\"medium\"\n        >\n            {isLoading ? 'Loading...' : 'Submit'}\n        </Button>\n    ];\n\n    return (\n        <Col md={12}>\n            <Modal\n                type={\"primary\"}\n                title=\"Departments Form\"\n                visible={state.visible}\n                onCancel={() => handleOk()}\n                footer={footerButtons}\n            >\n                <Form\n                    {...layout}\n                    name={'departmentForm'}\n                    form={form}\n                    id={'myForm'}\n                    validateMessages={validateMessages}\n                    onFinish={handleSubmit}\n                >\n                    <Form.Item\n                        name=\"name\"\n                        rules={[{required: true}]}\n                        initialValue={department.name ? department.name : null}\n                        label=\"Name\"\n                    >\n                        <Input placeholder=\"name\"/>\n                    </Form.Item>\n                    <Form.Item\n                        name=\"description\"\n                        initialValue={department.description ? department.description : null}\n                        rules={[{ required: true }]}\n                        label=\"Description\"\n                    >\n                        <Input.TextArea placeholder=\"Description\"/>\n                    </Form.Item>\n                    <Form.Item\n                        name=\"status\"\n                        initialValue={department.status ? department.status : ''}\n                        rules={[{ required: true }]}\n                        label=\"Status\"\n                    >\n                        <Select>\n                            {Constants.STATUS.map((status, si) => (\n                                <Select.Option key={si} value={status.value}>{status.label}</Select.Option>\n                            ))}\n                        </Select>\n                    </Form.Item>\n                </Form>\n            </Modal>\n        </Col>\n    )\n}\n\nexport default DepartmentForm;\n","import actions from './actions'\nimport {RequestService as req} from \"../../../services/requestService\";\nimport { Constants } from \"../../../config/constants\";\n\nconst { fetchDepartmentAction, fetchDepartmentsAction, resetDepartmentFormAction } = actions;\n\nexport const addDepartment = (data, action) => {\n    return async dispatch => {\n        await req.postRequest({\n            url: `${Constants.USER_MANAGEMENT}departments`,\n            auth: 'bearer',\n            body: data\n        }, async (cb) => {\n            await dispatch(fetchDepartments({page: 1, perPage: 10}));\n            if (action) await action();\n        })\n    };\n};\n\nexport const fetchDepartments = (queries) => {\n    return async dispatch => {\n        await req.getRequest({\n            url: `${Constants.USER_MANAGEMENT}departments`,\n            queries,\n            auth: 'bearer'\n        }, (cb) => dispatch(fetchDepartmentsAction(cb)))\n    };\n};\n\nexport const updateDepartment = (data, action) => {\n    return async dispatch => {\n        await req.putRequest({\n            url: `${Constants.USER_MANAGEMENT}departments/${data._id}`,\n            auth: 'bearer',\n            body: data\n        },  async (cb) => {\n            await dispatch(fetchDepartments({page: 1, perPage: 10}));\n            if (action) await action();\n        })\n    };\n};\n\nexport const resetDepartmentForm = () => dispatch => dispatch(resetDepartmentFormAction());\nexport const fetchDepartment = (_id, action) => {\n    return async dispatch => {\n        await req.getRequest({\n            url: `${Constants.USER_MANAGEMENT}departments/${_id}`,\n            auth: 'bearer'\n        }, async (cb) => {\n            await dispatch(fetchDepartmentAction(cb));\n            if (action) await action();\n        })\n    };\n};\n\nexport const deleteDepartment = (_id) => {\n    return async dispatch => {\n        await req.deleteRequest({\n            url: `${Constants.USER_MANAGEMENT}departments/${_id}`,\n            auth: 'bearer'\n        }, (cb) => dispatch(fetchDepartments({page: 1, perPage: 10})))\n    };\n};\n","import React, {useState, useEffect} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {Main} from \"../../styled\";\nimport {Form} from \"antd\";\nimport DepartmentList from \"./list\";\nimport DepartmentForm from \"./form\";\nimport {\n    addDepartment,\n    fetchDepartments,\n    fetchDepartment,\n    updateDepartment,\n    deleteDepartment,\n    resetDepartmentForm\n} from \"../../../redux/userManagement/departments/actionCreator\";\n\nconst DepartmentsData = () => {\n    const dispatch = useDispatch();\n    const isLoading = useSelector(state => state.utilities.loading);\n    const departments = useSelector(state => state.umDepartments.departments);\n    const department = useSelector(state => state.umDepartments.department);\n    const [form] = Form.useForm()\n\n    const [state, setState] = useState({\n        visible: false,\n        uploading: false,\n    });\n\n    useEffect(() => {\n        const fetchData = async () => {\n            await dispatch(fetchDepartments({page: 1, perPage: 10}))\n        };\n        fetchData().then(r => {});\n    }, [dispatch]);\n\n    const getDepartments = async (page, perPage) => await dispatch(fetchDepartments({page, perPage}));\n    const getDepartmentInfo = (_id) => dispatch(fetchDepartment(_id, showModalEdit));\n    const showModal = async type => {\n        await setState({ ...state, visible: true });\n        await dispatch(resetDepartmentForm());\n        await form.resetFields();\n    };\n\n    const showModalEdit = async () => {\n        await setState({ ...state, visible: true });\n        await form.resetFields();\n    };\n\n    const handleOk = () => {\n        setState({ ...state, visible: false });\n    };\n\n    return (\n        <Main>\n            <DepartmentList\n                state={state}\n                setState={setState}\n                showModal={showModal}\n                isLoading={isLoading}\n                departments={departments}\n                getDepartments={getDepartments}\n                getDepartmentInfo={getDepartmentInfo}\n                deleteDepartment={deleteDepartment}\n            />\n\n            <DepartmentForm\n                form={form}\n                state={state}\n                department={department}\n                addDepartment={addDepartment}\n                updateDepartment={updateDepartment}\n                handleOk={handleOk}\n                isLoading={isLoading}\n            />\n        </Main>\n    )\n}\n\nexport default DepartmentsData;\n"],"sourceRoot":""}