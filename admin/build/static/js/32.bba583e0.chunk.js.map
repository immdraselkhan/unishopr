{"version":3,"sources":["container/webSetup/cities/list.js","container/webSetup/cities/form.js","redux/webSetup/cities/actionCreator.js","container/webSetup/cities/index.js"],"names":["CityList","showModal","isLoading","cities","getCities","getCityInfo","deleteCity","columns","title","dataIndex","key","render","country","name","className","Scope","checkScopes","size","type","icon","onClick","Alert","confirm","action","headerButtons","ghost","subTitle","total","onBack","window","history","back","extra","rowKey","bordered","loading","dataSource","data","pagination","current","page","onChange","pageNo","perPageNo","CityForm","form","state","city","addCity","updateCity","countries","handleOk","dispatch","useDispatch","handleSubmit","_id","Object","assign","footerButtons","htmlType","disabled","md","modalType","visible","onCancel","footer","labelCol","span","wrapperCol","id","validateMessages","required","onFinish","Item","rules","initialValue","label","placeholder","Option","value","length","map","latitude","longitude","status","fetchCityAction","actions","fetchCitiesAction","resetCityFormAction","req","postRequest","url","Constants","WEB_SETUP","auth","body","cb","fetchCities","perPage","queries","getRequest","putRequest","deleteRequest","CitiesData","useSelector","utilities","wsCities","useForm","useState","colorModal","uploading","setState","useEffect","fetchData","then","r","utilitiesCountries","resetFields","showModalEdit","fetchCity"],"mappings":"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","file":"static/js/32.bba583e0.chunk.js","sourcesContent":["import React from \"react\";\nimport {Scope} from \"../../../services/scopeService\";\nimport FontAwesome from \"react-fontawesome\";\nimport {Alert} from \"../../../services/alertService\";\nimport {Button} from \"../../../components/buttons/buttons\";\nimport FeatherIcon from \"feather-icons-react\";\nimport {Button as AntButton, PageHeader, Table} from \"antd\";\n\nconst CityList = ({showModal, isLoading, cities, getCities, getCityInfo, deleteCity}) => {\n    const columns = [\n        {\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n        },\n        {\n            title: 'Country',\n            dataIndex: 'country',\n            key: 'country',\n            render: (country) => <>{country?.name}</>\n        },\n        {\n            title: 'Latitude',\n            dataIndex: 'latitude',\n            key: 'latitude',\n            render: (key) => key ? key : 'N/A'\n        },\n        {\n            title: 'Longitude',\n            dataIndex: 'longitude',\n            key: 'longitude',\n            render: (key) => key ? key : 'N/A'\n        },\n        {\n            title: 'Status',\n            dataIndex: 'status',\n            key: 'status',\n        },\n        {\n            title: <div className=\"text-right\">Action</div>,\n            dataIndex: '_id',\n            key: '_id',\n            render: (key) => <div className=\"text-right\">\n                {Scope.checkScopes(['ws_cities_update']) && (\n                    <AntButton\n                        size=\"small\"\n                        type=\"ghost\"\n                        className=\"minimum-mr color-info border-info\"\n                        icon={<FontAwesome name={\"edit\"} />}\n                        onClick={() => getCityInfo(key)}\n                    />\n                )}\n                {Scope.checkScopes(['ws_cities_delete']) && (\n                    <AntButton\n                        size=\"small\"\n                        type=\"ghost\"\n                        className=\"color-danger border-danger\"\n                        icon={<FontAwesome name={\"trash\"} />}\n                        onClick={() => Alert.confirm({action: deleteCity(key)})}\n                    />\n                )}\n            </div>\n        },\n    ];\n\n    const headerButtons = [\n        <div key=\"1\" className=\"page-header-action\">\n            {Scope.checkScopes(['ws_categories_create']) && (\n                <Button size=\"medium\" type=\"primary\" onClick={() => showModal('primary')}>\n                    <FeatherIcon icon=\"plus\" size={14}/>\n                    Add New\n                </Button>\n            )}\n        </div>\n    ]\n    return (\n        <div>\n            <PageHeader\n                ghost={false}\n                title=\"Cities\"\n                subTitle={`List of all ${cities?.total} Cities.`}\n                onBack={() => window.history.back()}\n                extra={headerButtons}\n            >\n                <Table\n                    rowKey=\"_id\"\n                    bordered={false}\n                    className=\"table-responsive\"\n                    loading={isLoading}\n                    dataSource={cities.data}\n                    columns={columns}\n                    // scroll={{ y: window.innerHeight / 2  }}\n                    pagination={{\n                        total: cities.total,\n                        current: cities.page,\n                        onChange: async (pageNo, perPageNo) => await getCities(pageNo, perPageNo)\n                    }} />\n            </PageHeader>\n        </div>\n    )\n}\n\nexport default CityList;\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Button } from \"../../../components/buttons/buttons\";\nimport { Col, Form, Input, Modal, Select } from \"antd\";\n\nconst CityForm = (\n    {\n        form,\n        state,\n        city,\n        addCity,\n        updateCity,\n        countries,\n        isLoading,\n        handleOk\n    }) => {\n    const dispatch = useDispatch()\n    const layout = { labelCol: { span: 8 }, wrapperCol: { span: 16 } }\n\n    const validateMessages = {\n        required: '${label} is required!',\n    };\n\n    const handleSubmit = async (data) => {\n        if (city._id) {\n            Object.assign(data, { _id: city._id });\n            await dispatch(updateCity(data, handleOk))\n        } else\n            await dispatch(addCity(data, handleOk));\n    };\n\n    const footerButtons = [\n        <Button\n            form=\"myForm\"\n            key=\"submit\"\n            htmlType=\"submit\"\n            type=\"primary\"\n            disabled={isLoading}\n            size=\"medium\">\n            {isLoading ? 'Loading...' : 'Submit'}\n        </Button>\n    ];\n    return (\n        <Col md={12}>\n            <Modal\n                type={state.modalType}\n                title=\"City Form\"\n                visible={state.visible}\n                onCancel={() => handleOk()}\n                footer={footerButtons}\n            >\n                <Form\n                    {...layout}\n                    name={'cityForm'}\n                    form={form}\n                    id={'myForm'}\n                    validateMessages={validateMessages}\n                    onFinish={handleSubmit}>\n                    <Form.Item\n                        name=\"name\"\n                        rules={[{ required: true }]}\n                        initialValue={city.name ? city.name : null}\n                        label=\"Name\">\n                        <Input placeholder=\"Name\" />\n                    </Form.Item>\n                    <Form.Item\n                        name=\"country\"\n                        initialValue={city?.country?._id ? city.country._id : ''}\n                        rules={[{ required: true }]}\n                        label=\"Country\">\n                        <Select>\n                            <Select.Option value=\"\">Country</Select.Option>\n                            {countries.length && countries.map((country) => (\n                                <Select.Option key={country._id} value={country._id}>{country.name}</Select.Option>\n                            ))}\n                        </Select>\n                    </Form.Item>\n                    <Form.Item\n                        name=\"latitude\"\n                        initialValue={city.latitude ? city.latitude : null}\n                        label=\"Latitude\">\n                        <Input placeholder=\"Latitude\" />\n                    </Form.Item>\n                    <Form.Item\n                        name=\"longitude\"\n                        initialValue={city.longitude ? city.longitude : null}\n                        label=\"Longitude\">\n                        <Input placeholder=\"Longitude\" />\n                    </Form.Item>\n                    <Form.Item\n                        name=\"status\"\n                        initialValue={city.status ? city.status : ''}\n                        rules={[{ required: true }]}\n                        label=\"Status\">\n                        <Select>\n                            <Select.Option value=\"\">Status</Select.Option>\n                            <Select.Option value=\"active\">Active</Select.Option>\n                            <Select.Option value=\"inactive\">Inactive</Select.Option>\n                        </Select>\n                    </Form.Item>\n                </Form>\n            </Modal>\n\n        </Col>\n    )\n}\n\nexport default CityForm;\n","import actions from './actions'\nimport {RequestService as req} from \"../../../services/requestService\";\nimport { Constants } from \"../../../config/constants\";\n\nconst { fetchCityAction, fetchCitiesAction, resetCityFormAction } = actions;\n\nexport const addCity = (data, action) => {\n    return async dispatch => {\n        await req.postRequest({ \n            url: `${Constants.WEB_SETUP}cities`, \n            auth: 'bearer', \n            body: data\n        }, async (cb) => {\n            await dispatch(fetchCities({page: 1, perPage: 10}));\n            await dispatch(action);\n        })\n    };\n};\n\nexport const fetchCities = (queries) => {\n    return async dispatch => {\n        await req.getRequest({ \n            url: `${Constants.WEB_SETUP}cities`, \n            queries, \n            auth: 'bearer'\n        }, (cb) => dispatch(fetchCitiesAction(cb)))\n    };\n};\n\nexport const updateCity = (data, action) => {\n    return async dispatch => {\n        await req.putRequest({ \n            url: `${Constants.WEB_SETUP}cities/${data._id}`,\n            auth: 'bearer', \n            body: data\n        }, async (cb) => {\n            await dispatch(fetchCities({page: 1, perPage: 10}));\n            await dispatch(action);\n        })\n    };\n};\n\nexport const resetCityForm = () => dispatch => dispatch(resetCityFormAction());\nexport const fetchCity = (_id, action) => {\n    return async dispatch => {\n        await req.getRequest({ \n            url: `${Constants.WEB_SETUP}cities/${_id}`,\n            auth: 'bearer'\n        }, async (cb) => {\n            await dispatch(fetchCityAction(cb));\n            await dispatch(action);\n        })\n    };\n};\n\nexport const deleteCity = (_id) => {\n    return async dispatch => {\n        await req.deleteRequest({ \n            url: `${Constants.WEB_SETUP}cities/${_id}`,\n            auth: 'bearer'\n        }, (cb) => dispatch(fetchCities({page: 1, perPage: 10})))\n    };\n};\n","import React, {useState, useEffect} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {Main} from \"../../styled\";\nimport {Form} from \"antd\";\nimport CityList from \"./list\";\nimport CityForm from \"./form\";\nimport {\n    addCity,\n    fetchCities,\n    fetchCity,\n    updateCity,\n    deleteCity,\n    resetCityForm\n} from \"../../../redux/webSetup/cities/actionCreator\";\nimport {fetchCountries as utilitiesCountries} from \"../../../redux/utilities/actionCreator\";\n\nconst CitiesData = () => {\n    const dispatch = useDispatch();\n    const isLoading = useSelector(state => state.utilities.loading);\n    const cities = useSelector(state => state.wsCities.cities);\n    const city = useSelector(state => state.wsCities.city);\n    const countries = useSelector(state => state.utilities.countries);\n    const [form] = Form.useForm()\n\n    const [state, setState] = useState({\n        visible: false,\n        modalType: 'primary',\n        colorModal: false,\n        uploading: false,\n    });\n\n    useEffect(() => {\n        const fetchData = async () => {\n            await dispatch(fetchCities({page: 1, perPage: 10}))\n        };\n        fetchData().then(r => {});\n    }, []);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            await dispatch(utilitiesCountries())\n        };\n        fetchData().then(r => {});\n    }, []);\n\n    const getCities = async (page, perPage) => await dispatch(fetchCities({page, perPage}));\n    const getCityInfo = (_id) => dispatch(fetchCity(_id, showModalEdit));\n    const showModal = async type => {\n        await setState({\n            ...state,\n            visible: true,\n            modalType: type,\n        });\n        await dispatch(resetCityForm());\n        await form.resetFields();\n    };\n\n    const showModalEdit = async () => {\n        await setState({\n            ...state,\n            visible: true,\n            modalType: \"primary\",\n        });\n        await form.resetFields();\n    };\n\n    const handleOk = () => {\n        setState({\n            ...state,\n            visible: false,\n            colorModal: false,\n        });\n    };\n    return (\n        <Main>\n            <CityList\n                state={state}\n                setState={setState}\n                showModal={showModal}\n                isLoading={isLoading}\n                cities={cities}\n                getCities={getCities}\n                getCityInfo={getCityInfo}\n                deleteCity={deleteCity}/>\n\n            <CityForm\n                form={form}\n                state={state}\n                city={city}\n                addCity={addCity}\n                updateCity={updateCity}\n                countries={countries}\n                handleOk={handleOk}\n                isLoading={isLoading}/>\n        </Main>\n    )\n}\n\nexport default CitiesData;\n"],"sourceRoot":""}